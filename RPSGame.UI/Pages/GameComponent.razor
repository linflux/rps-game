@page "/game"
@using RPSGame.Domain.Enums
@inject IGameService GameService

<h3>Rock-Paper-Scissors Game</h3>


@if (!IsGameLevelSelected)
{
    <GameLevelSelector OnGameLevelSelected="SetGameLevel" />
}
else if (!IsPlayerNameSet)
{
    <PlayerNameInput OnPlayerNameSubmitted="SetPlayerName" />
}
else
{
    <div>
        <h5>Player @PlayerName, choose your move hand</h5>

        <MoveSelector Moves="Moves" OnMoveSelected="SetPlayerMove" /> 
    </div>

    <button class="play-button" @onclick="PlayGame" disabled="@IsPlayButtonDisabled">
        <i class="fas fa-play"></i> Play
    </button>

    @if (CurrentGamePlayResult != null)
    {
        <ComputerMoveDisplay ComputerMoveName="@ComputerMove" />
    }

    <ResultDisplay GamePlayResult="@CurrentGamePlayResult" />
}

@code {
    private bool IsGameLevelSelected = false;
    private bool IsPlayerNameSet = false;
    private string PlayerName;
    private string PlayerMove;
    private string ComputerMove;
    private GamePlayResult CurrentGamePlayResult;

    private List<Move> Moves;

    protected override void OnInitialized()
    {
    }

    private void SetGameLevel(GameLevel level)
    {
        try
        {
            Console.WriteLine($"Setting game level to: {level}");
            GameService.SetGameLevel(level);
            Moves = GameService.GetAvailableMoves(level);

            IsGameLevelSelected = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting game level: {ex.Message}");
        }
    }

    private void SetPlayerName(string playerName)
    {
        GameService.SetPlayer(playerName);

        PlayerName = playerName;

        PlayerName = GameService.GetPlayerName();
        
        IsPlayerNameSet = true;
    }

    private void SetPlayerMove(string moveName)
    {
        PlayerMove = moveName;
    }

    private bool IsPlayButtonDisabled => string.IsNullOrWhiteSpace(PlayerMove);


    private void PlayGame()
    {
        try
        {
            var player = GameService.GetMove(PlayerMove);
            var opponent = GameService.GetComputerMove();
            
            ComputerMove = opponent.Name;
            CurrentGamePlayResult = GameService.Play(player.Name, opponent.Name);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            CurrentGamePlayResult = null;
        }
    }
}
